{"version":3,"sources":[" api/api.ts","components/Users/Users.module.css"," api/usersApi.ts","redux/users-reducer.ts","common/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","index.tsx","common/Paginator.module.css","common/Preloader.tsx"," api/authApi.ts"," api/securityApi.ts","redux/auth-reducer.ts","common/Preloader.module.css"," api/profileApi.ts","redux/profile-reducer.ts","components/Header/Header.module.css","hoc/withAuthRedirect.tsx","assets/images/defaultProfileImage.png","redux/dialogs-reducer.ts"],"names":["ResultCodeEnum","ResultCodeForCaptchaEnum","instance","axios","create","withCredentials","baseURL","headers","module","exports","usersAPI","getUsers","currentPage","pageSize","get","then","res","data","follow","userId","post","unfollow","delete","initialState","users","totalUsersCount","isFetching","followingInProgress","actions","type","page","totalCount","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","state","action","map","u","id","followed","filter","Paginator","props","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","className","s","onClick","paginatorIcon","icon","faAngleDoubleLeft","faAngleLeft","p","cn","pageNumber","e","onPageChanged","faAngleRight","faAngleDoubleRight","User","text","user","userContainer","image_wrap","to","photos","large","userIcon","faUserTie","src","discription","name","status","length","slice","disabled","some","mode_Green","Users","all","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","Preloader","React","Component","compose","connect","bind","getState","items","WithAuthRedirect","Header","profile","isAuth","login","logout","header","wrapper","helper_wrapper","left","logo__txt","activeClassName","active","nav","item","profileInfo","small","defPhoto","linkWrap","nickname","loginButton","hiden","HeaderContainer","authorizedUserId","getHeaderProfile","refreshProfile","profilePage","headerProfile","auth","initialized","appReducer","friends","img","sidebarReducer","rootReducer","combineReducers","app","profileReducer","dialogsPage","dialogsReducer","sideBar","authReducer","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","WithSuspense","WrappedComponent","fallback","DialogsContainer","lazy","ProfileContainer","Login","SuspenseDialogs","SuspenseProfile","App","initializeApp","path","render","exact","AppContainer","checkAuth","withRouter","SamuraiJSApp","ReactDOM","document","getElementById","loader","l_main","l_square","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","payload","authData","Success","loginData","CaptchaIsRequired","getCaptchaUrl","errMessage","messages","stopSubmit","_error","url","profileAPI","put","photoFile","formData","FormData","append","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_HEADER_PROFILE","SET_USER_STATUS","SAVE_PHOTO_SUCCESS","posts","message","likesCount","newPostText","setUserStatusAC","getProfile","getUserStatus","updateUserStatus","savePhoto","file","saveProfile","Promise","reject","postId","mapStateToPropsForRedirect","restProps","dialogs","addMessage","newMessageBody"],"mappings":"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","file":"static/js/main.29b8d350.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\"API-KEY\": \"2cc3354f-01b5-4bfb-aa39-e518c7551d43\"}\r\n});\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\nexport type GetItemsType = {\r\n    items:Array<UserType>\r\n    totalCount:number\r\n    error: string|null\r\n}\r\nexport type ApiResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"all\":\"Users_all__2rk21\",\"userIcon\":\"Users_userIcon__1-YJ8\",\"users\":\"Users_users__EkhOa\",\"userContainer\":\"Users_userContainer__EgYaH\",\"image_wrap\":\"Users_image_wrap__3o7jT\",\"name\":\"Users_name__21Uq3\",\"discription\":\"Users_discription__17jd7\",\"mode_Green\":\"Users_mode_Green__3MOC4\"};","import {GetItemsType, instance,ApiResponseType} from \"./api\";\r\n\r\nexport const  usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => {\r\n                return res.data\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ApiResponseType>(`follow/${userId}`).then(res=>res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<ApiResponseType>(`follow/${userId}`).then(res=>res.data) as Promise<ApiResponseType>\r\n    }\r\n}\r\n\r\n","import {UserType} from \"../types/types\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {usersAPI} from \"../ api/usersApi\";\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,  //Array of users id\r\n};\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state, users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state, users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case 'SET_USERS':\r\n            return {...state, users: action.users};\r\n        case 'SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.page};\r\n        case 'SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.totalCount};\r\n        case 'TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching};\r\n        case 'TOGGLE_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    unfollowSucces: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\r\n    followSucces: (userId: number) => ({type: 'FOLLOW', userId}as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users}as const),\r\n    setCurrentPage: (page: number) => ({type: 'SET_CURRENT_PAGE', page}as const),\r\n    setTotalUsersCount: (totalCount: number) => ({type: 'SET_TOTAL_USERS_COUNT', totalCount}as const),\r\n    toggleIsFetching :(isFetching: boolean) => ({type: 'TOGGLE_IS_FETCHING', isFetching}as const),\r\n    toggleFollowingProgress : (isFetching: boolean, userId: number) => ({type: 'TOGGLE_FOLLOWING_PROGRESS', isFetching, userId}as const),\r\n}\r\n\r\n\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => async (dispatch, getState) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    let data = await usersAPI.getUsers(page, pageSize);\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: any, actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    const data = await apiMethod(userId);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n        dispatch(actions.toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSucces)\r\n\r\n}\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSucces)\r\n}\r\nexport default usersReducer;\r\n\r\n\r\ntype InitialState = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import React, {useState} from \"react\";\r\nimport s from './Paginator.module.css';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleRight, faAngleLeft, faAngleDoubleLeft, faAngleDoubleRight} from '@fortawesome/free-solid-svg-icons';\r\nimport cn from \"classnames\";\r\n\r\n\r\ntype Props ={\r\n    totalUsersCount:number,\r\n    pageSize:number,\r\n    onPageChanged:(pageNumber:number)=>void,\r\n    currentPage: number,\r\n}\r\n\r\nconst Paginator:React.FC<Props> = (props ) => {\r\n\r\n    let portionSize = 10;\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount /  props.pageSize);\r\n    let pages:Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let  [portionNumber, setPortionNumber ] = useState(1);\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize;\r\n    let rightPortionNumber = portionNumber * portionSize;\r\n\r\n    return <div className={s.pages}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber( 1)\r\n        }}><FontAwesomeIcon className={s.paginatorIcon} icon={faAngleDoubleLeft}/></button>\r\n        }\r\n{portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}><FontAwesomeIcon className={s.paginatorIcon}  icon={faAngleLeft}/></button>\r\n        }\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\r\n            .map(p => {\r\n                return<span className={cn({\r\n                        [s.currentPage]: props.currentPage === p\r\n                    }, s.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p)\r\n                             }\r\n                             }\r\n                >{p}</span>\r\n\r\n\r\n            })\r\n        }\r\n\r\n        {portionCount > portionNumber &&\r\n        <button onClick={(() => {\r\n            setPortionNumber(portionNumber + 1)\r\n            // < i\r\n            // // className = \"fas fa-angle-right\" > < /i>\r\n        })}><FontAwesomeIcon className={s.paginatorIcon}  icon={faAngleRight}/></button>\r\n        }\r\n        {portionCount > portionNumber &&\r\n        <button onClick={(() => {\r\n            setPortionNumber(portionCount)\r\n        })}><FontAwesomeIcon className={s.paginatorIcon}  icon={faAngleDoubleRight}/></button>\r\n        }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport s from './Users.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faUserTie} from '@fortawesome/free-solid-svg-icons';\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user:UserType,\r\n    followingInProgress: Array<number>,\r\n    follow:(userId:number)=>void,\r\n    unfollow:(userId:number)=>void,\r\n\r\n}\r\n\r\nconst User:React.FC<PropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n\r\n    const checkLength = (text:string) => {\r\n        if (!text) {\r\n            return 'Статус'\r\n        } else if (text.length < 61) {\r\n            return text\r\n        } else {\r\n            let textSm = text.slice(0, 60) + '...'\r\n            return textSm\r\n\r\n        }\r\n    }\r\n\r\n    return <div className={s.userContainer}>\r\n        <div className={s.image_wrap}>\r\n            <NavLink to={`/Profile/${user.id}`}>\r\n                {user.photos.large === null ? <FontAwesomeIcon className={s.userIcon} icon={faUserTie}/> :\r\n                    <img src={user.photos.large}/>}\r\n\r\n\r\n            </NavLink>\r\n\r\n        </div>\r\n        <div className={s.discription}>\r\n            <NavLink to={`/Profile/${user.id}`} className={s.name}>{user.name} </NavLink>\r\n            <span>{checkLength(user.status)}</span>\r\n        </div>\r\n        {user.followed ?\r\n            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                    onClick={() => {\r\n                        unfollow(user.id)\r\n                    }\r\n\r\n                    }>Отписаться</button> :\r\n            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                    className={s.mode_Green} onClick={() => {\r\n                follow(user.id)\r\n            }\r\n\r\n            }>Подписаться</button>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport s from './Users.module.css';\r\nimport Paginator from \"../../common/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    currentPage: number,\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    follow: (userId:number) => void\r\n    unfollow: (userId:number) => void\r\n}\r\n\r\nconst Users: React.FC<PropsType> = (props) => {\r\n\r\n    return <div className={s.all}>\r\n\r\n        <Paginator totalUsersCount={props.totalUsersCount}\r\n                   currentPage={props.currentPage}\r\n                   pageSize={props.pageSize}\r\n                   onPageChanged={props.onPageChanged}\r\n            // portionSize={props.portionSize}\r\n\r\n        />\r\n        <div className={s.users}>\r\n            {\r\n\r\n                props.users.map(u => <User key={u.id}\r\n                                           user={u}\r\n                                           followingInProgress={props.followingInProgress}\r\n                                           follow={props.follow}\r\n                                           unfollow={props.unfollow}\r\n\r\n                />)\r\n\r\n            }\r\n        </div>\r\n        <Paginator totalUsersCount={props.totalUsersCount}\r\n                   currentPage={props.currentPage}\r\n                   pageSize={props.pageSize}\r\n                   onPageChanged={props.onPageChanged}\r\n            // portionSize={props.portionSize}\r\n\r\n        />\r\n\r\n    </div>\r\n}\r\n\r\nexport default Users;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state:AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\n\r\nexport const getUsers  = createSelector(getUsersSelector, (users)=> {\r\n     return users.filter((u)=>true)\r\n})\r\n\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state:AppStateType) => {\r\n\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state:AppStateType ) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n// export const getPortionSize = (state) => {\r\n//     return state.usersPage.portionSize\r\n// }\r\n","import React from 'react'\r\nimport {\r\n    follow, requestUsers,\r\n    unfollow\r\n} from '../../redux/users-reducer';\r\nimport {connect} from 'react-redux';\r\nimport Users from './Users';\r\nimport Preloader from \"../../common/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n} from \"../../redux/users-selectors\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    isFetching: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    follow: (userId:number) => void\r\n    unfollow: (userId:number) => void\r\n    getUsers: (currentPage:number, pageSize:number) => void\r\n}\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\ntype PropsType =  MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber:number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   unfollow={this.props.unfollow}\r\n                   follow={this.props.follow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                // portionSize={this.props.portionSize}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n\r\n    return {\r\n\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        // portionSize: getPortionSize(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    //<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n    connect<MapStatePropsType,MapDispatchPropsType,OwnPropsType,AppStateType>(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        getUsers: requestUsers,\r\n    })\r\n    , WithAuthRedirect\r\n)(UsersContainer)\r\n","import React, {useState} from \"react\"\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defPhoto from \"../../assets/images/defaultProfileImage.png\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\n\r\nexport type PropsType = {\r\n    isAuth: boolean\r\n    profile: ProfileType | null\r\n    login: string | null\r\n    logout: ()=> void\r\n    authorizedUserId:number | null\r\n    getHeaderProfile: (usrId:number )=> void\r\n}\r\n\r\n\r\nconst Header:React.FC<PropsType> = ({profile, isAuth,login,logout}) => {\r\n    if (!profile) {\r\n        return  <header className={s.header}>\r\n\r\n            <div className={s.wrapper}>\r\n                <div className={s.helper_wrapper}>\r\n                    <div className={s.left}>\r\n                        {/*<h2 className={s.logo__txt}>  <span>FH</span> </h2>*/}\r\n                        <NavLink to=\"/profile\" className={s.logo__txt}\r\n                                 activeClassName={s.active}><span>FH</span></NavLink>\r\n                        <nav className={s.nav}>\r\n                            <NavLink to=\"/profile\" className={s.item} activeClassName={s.active}>Моё резюме</NavLink>\r\n                            {/*<NavLink to=\"/dialogs\" className={s.item} activeClassName={s.active}>Сообщения</NavLink>*/}\r\n                            <NavLink to=\"/users\" className={s.item} activeClassName={s.active}>Смотреть анкеты</NavLink>\r\n                        </nav>\r\n                    </div>\r\n\r\n\r\n                    <div className={s.login}>\r\n                             <span><NavLink className={s.loginButton} to={'/login'}>Войти</NavLink></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    }\r\n\r\n    return (\r\n\r\n        <header className={s.header}>\r\n\r\n            <div className={s.wrapper}>\r\n                <div className={s.helper_wrapper}>\r\n                    <div className={s.left}>\r\n                        {/*<h2 className={s.logo__txt}>  <span>FH</span> </h2>*/}\r\n                        <NavLink to=\"/profile\" className={s.logo__txt}\r\n                                 activeClassName={s.active}><span>FH</span></NavLink>\r\n                        <nav className={s.nav}>\r\n                            <NavLink to=\"/profile\" className={s.item} activeClassName={s.active}>Моё резюме</NavLink>\r\n                            {/*<NavLink to=\"/dialogs\" className={s.item} activeClassName={s.active}>Сообщения</NavLink>*/}\r\n                            <NavLink to=\"/users\" className={s.item} activeClassName={s.active}>Смотреть анкеты</NavLink>\r\n                        </nav>\r\n                    </div>\r\n\r\n\r\n                    <div className={s.login}>\r\n                        {isAuth\r\n                            ? <div className={s.profile}>\r\n                                <div className={s.profileInfo}>\r\n                                    <div>{login}</div>\r\n                                    <img   src={profile.photos.small ? profile.photos.small : defPhoto}/>\r\n                                </div>\r\n                                <span className={s.linkWrap}><NavLink to=\"/profile\"\r\n                                                                      className={s.nickname}>Профиль</NavLink></span>\r\n                                <span className={s.loginButton+' ' + s.hiden} onClick={ logout}>Выйти</span>\r\n                              </div>\r\n                            : <span><NavLink className={s.loginButton} to={'/login'}>Войти</NavLink></span>}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout,} from \"../../redux/auth-reducer\";\r\nimport {getHeaderProfile} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    profile: ProfileType | null\r\n    login: string | null\r\n    authorizedUserId: number | null\r\n}\r\ntype MapDispatchPropsType = {\r\n\r\n    logout: () => void\r\n\r\n    getHeaderProfile: (usrId: number) => void\r\n\r\n}\r\n\r\ntype PropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        const userId = this.props.authorizedUserId;\r\n        if (userId) {\r\n            this.props.getHeaderProfile(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Header {...this.props}\r\n                       logout={this.props.logout}\r\n                       isAuth={this.props.isAuth}\r\n                       profile={this.props.profile}\r\n                       login={this.props.login}\r\n\r\n        />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.headerProfile,\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    authorizedUserId: state.auth.id\r\n})\r\n\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    getHeaderProfile,\r\n    logout\r\n})(HeaderContainer)","import {checkAuth} from \"./auth-reducer\";\r\nimport {AppStateType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\nlet initialState: InitialStateType = {\r\n    initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state, initialized: true,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst  actions = {\r\n    initializedSuccess: () => ({type: 'INITIALIZED_SUCCESS',}as const)\r\n}\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, GetStateType, unknown, ActionsTypes>\r\n\r\nexport const initializeApp = (): any => (dispatch: any) => {\r\n    let promise = dispatch(checkAuth());\r\n    promise.then(() => {\r\n        return dispatch(actions.initializedSuccess());\r\n    })\r\n\r\n}\r\n\r\n\r\nexport default appReducer;","let initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Erjan', img: 'https://memepedia.ru/wp-content/uploads/2019/03/erzhan-768x569.jpg'},\r\n        {\r\n            id: 3,\r\n            name: 'uRina',\r\n            img: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTirEEXAcgdftxMTICIHgtrNo9qBZhlLuUVlg&usqp=CAU'\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Dushnila',\r\n            img: 'https://media.professionali.ru/processor/topics/size5/2017/03/21/brodude-ru-8-06-2015-f2ecjf7krnt7z.jpg'\r\n        },\r\n    ]}\r\n    type InitialStateType = typeof initialState\r\nconst sidebarReducer = (state = initialState, action:any):InitialStateType=>{\r\n    switch (action.type) {\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default sidebarReducer;","import { Action, applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sideBar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n}\r\n)\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<Promise<void>, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store;","import React, {Suspense} from \"react\";\r\nimport Preloader from \"../common/Preloader\";\r\n\r\n\r\nexport function WithSuspense <WCP>(WrappedComponent:React.ComponentType<WCP>)  {\r\n    return (props:WCP) => {\r\n        return <Suspense fallback={<Preloader/>}>\r\n             <WrappedComponent{...props}/>\r\n        </Suspense>\r\n    }\r\n}","import './App.css';\r\nimport React from 'react';\r\nimport {  HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./common/Preloader\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {WithSuspense} from \"./hoc/withSuspense\";\r\n\r\n\r\nconst DialogsContainer = React.lazy(() => import ( \"./components/Dialogs/DialogsContainer\"))\r\nconst ProfileContainer = React.lazy(() => import (\"./components/Profile/ProfileContainer\"))\r\nconst Login = React.lazy(() => import (\"./components/Login/Login\"))\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: ()=>void\r\n}\r\nconst SuspenseDialogs = WithSuspense(DialogsContainer)\r\nconst SuspenseProfile = WithSuspense(ProfileContainer)\r\n\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        } else {\r\n            return (<div>\r\n\r\n                    <HeaderContainer/>\r\n                    <div className=\"AppWrapper\">\r\n                        {/*<Sidebar store={this.props.store}/>*/}\r\n                        <div className='contentWrapper'>\r\n                            {\r\n                                //Withsuspense можно сделать без хока, см. доку реакта\r\n                            }\r\n                            <Switch>\r\n                                {/*swicth нужен, когда нам нужно перейсти по первому откликнувшемуся роуту*/}\r\n\r\n\r\n                                <Route path=\"/dialogs\" render={()=><SuspenseDialogs/>}/>\r\n                                <Route path='/profile/:userId?' render={()=><SuspenseProfile/>}/>\r\n                                <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                                <Route path=\"/login\" render={ WithSuspense(Login)}/>\r\n                                <Route exact path='/' render={() => <Redirect to={\"/profile\"}/>}/>\r\n                                <Route path=\"*\" render={() => <div>404 NOT FOUND</div>}/>\r\n\r\n\r\n                            </Switch>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType) => ({\r\n    initialized: state.app.initialized,\r\n})\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {initializeApp}),\r\n    withRouter,\r\n)(App);\r\n\r\nconst SamuraiJSApp:React.FC = ( ) => {\r\n    return <HashRouter >\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SamuraiJSApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\n\r\n//Samurai Way 1.0 passed!!))\r\n\r\n    ReactDOM.render(\r\n       <SamuraiJSApp/>, document.getElementById('root')\r\n    );","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Paginator_pages__z57Ek\",\"pageNumber\":\"Paginator_pageNumber__pDztG\",\"paginatorIcon\":\"Paginator_paginatorIcon__3d0m-\",\"currentPage\":\"Paginator_currentPage__1IP3E\"};","import React from \"react\";\r\nimport s from \"./Preloader.module.css\"\r\n\r\nconst Preloader = () => {\r\n    // return <img src={preloader}/>\r\n    return <div className={s.loader}>\r\n        <div className={s.l_main}>\r\n            <div className={s.l_square}><span></span><span></span><span></span></div>\r\n            <div className={s.l_square}><span></span><span></span><span></span></div>\r\n            <div className={s.l_square}><span></span><span></span><span></span></div>\r\n            {/*<div className={s.l_square}><span></span><span></span><span></span></div>*/}\r\n        </div>\r\n    </div>\r\n}\r\nexport default Preloader","import {instance, ApiResponseType, ResultCodeEnum, ResultCodeForCaptchaEnum} from \"./api\";\r\n\r\ntype CheckAuthDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n\r\n}\r\ntype LoginResponseDataType = {\r\n        userId: number\r\n\r\n}\r\nexport const authAPI = {\r\n    checkAuth() {\r\n        return instance.get<ApiResponseType<CheckAuthDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<ApiResponseType<LoginResponseDataType,ResultCodeEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType={\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`).then(res=>res.data)\r\n    },\r\n}","import {ResultCodeEnum, ResultCodeForCaptchaEnum} from \"../ api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../ api/authApi\";\r\nimport {securityAPI} from \"../ api/securityApi\";\r\n\r\n// type InitialStateType = {\r\n//     id: null | number,\r\n//     email: null | string,\r\n//     login: null | string,\r\n//     isAuth: boolean,\r\n//     captchaUrl: null | string,\r\n// };\r\n\r\nlet initialState = {\r\n    id: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as null | string,\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'auth/SET_USER_DATA':\r\n            return {\r\n                ...state, ...action.payload,\r\n            }\r\n        case 'auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state, ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'auth/SET_USER_DATA',\r\n        payload: {id, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'auth/GET_CAPTCHA_URL_SUCCESS',\r\n        payload: {captchaUrl}\r\n    } as const),\r\n\r\n}\r\n\r\n\r\n//-----------------------thunk-----------------------\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof stopSubmit>>\r\n\r\nexport const checkAuth = (): ThunkType => async (dispatch) => {\r\n    let authData = await authAPI.checkAuth()\r\n    if (authData.resultCode === ResultCodeEnum.Success) {\r\n        let {id, email, login} = authData.data\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (loginData.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(checkAuth())\r\n    } else {\r\n        if (loginData.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let errMessage = (loginData.messages.length > 0) ? loginData.messages : 'Something wrong';\r\n        dispatch(stopSubmit('Login', {_error: errMessage}));\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n\r\n    const data = await securityAPI.getCaptchaUrl()\r\n\r\n    const captchaUrl = data.url\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n        dispatch(checkAuth())\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__yyAyC\",\"l_main\":\"Preloader_l_main__1W_gA\",\"l_square\":\"Preloader_l_square__35SWx\",\"animsquare1\":\"Preloader_animsquare1__34OAR\",\"animsquare2\":\"Preloader_animsquare2__2IlfW\",\"animsquare3\":\"Preloader_animsquare3__3yh5T\",\"animsquare4\":\"Preloader_animsquare4__30sS9\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ApiResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType={\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res=>res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res=>res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ApiResponseType>('profile/status/', {status: status}).then(res=>res.data)\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put<ApiResponseType<SavePhotoResponseDataType>>('profile/photo/', formData, {\r\n            headers: {'Content-Type': ' multipart/form-data'}\r\n        }).then(res=>res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<ApiResponseType>('profile/', profile).then(res=>res.data)\r\n    }\r\n}","\r\nimport {FormErrors, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {FormAction} from \"redux-form/lib/actions\";\r\nimport {type} from \"os\";\r\nimport {profileAPI} from \"../ api/profileApi\";\r\nimport {usersAPI} from \"../ api/usersApi\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_HEADER_PROFILE = 'SET_HEADER_PROFILE';\r\nconst SET_USER_STATUS = 'SET_USER_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, name: 'Joseph', message: 'smth clever text', likesCount: 16},\r\n        {id: 2, name: 'Isaac', message: 'smth clever text about life', likesCount: 39}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    headerProfile: null as ProfileType | null,\r\n    newPostText:''\r\n};\r\nexport type InitialStateType = typeof initialState;\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, ({id: 5, name: 'smth', message: action.newPostText, likesCount: 0})],\r\n            }\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile};\r\n        }\r\n        case SET_HEADER_PROFILE: {\r\n            return {...state, headerProfile: action.headerProfile};\r\n        }\r\n        case SET_USER_STATUS: {\r\n            return {...state, status: action.status};\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType};\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter((p) => p.id !== action.postId)}\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype ActionsTypes =\r\n    AddPostActionCreatorType\r\n    | DeletePostType\r\n    | SetUserProfileType\r\n    | SetHeaderProfileType\r\n    | SetUserStatusACType\r\n    | SavePhotoSuccesType\r\n\r\ntype AddPostActionCreatorType = {\r\n    type: typeof ADD_POST,\r\n    newPostText: string\r\n}\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorType => ({type: ADD_POST, newPostText});\r\ntype DeletePostType = {\r\n    type: typeof DELETE_POST,\r\n    postId: number\r\n}\r\nexport const deletePost = (postId: number): DeletePostType => ({type: DELETE_POST, postId});\r\ntype SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileType => ({type: SET_USER_PROFILE, profile});\r\ntype SetHeaderProfileType = {\r\n    type: typeof SET_HEADER_PROFILE,\r\n    headerProfile: ProfileType\r\n}\r\nexport const setHeaderProfile = (headerProfile: ProfileType): SetHeaderProfileType => ({\r\n    type: SET_HEADER_PROFILE,\r\n    headerProfile\r\n});\r\ntype SetUserStatusACType = {\r\n    type: typeof SET_USER_STATUS,\r\n    status: string\r\n}\r\nexport const setUserStatusAC = (status: string): SetUserStatusACType => ({type: SET_USER_STATUS, status});\r\ntype SavePhotoSuccesType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS,\r\n    photos: PhotosType\r\n}\r\nexport const savePhotoSucces = (photos: PhotosType): SavePhotoSuccesType => ({type: SAVE_PHOTO_SUCCESS, photos});\r\n\r\n\r\n//-------------------------thunk----------------------------------------\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, GetStateType,  unknown, ActionsTypes>\r\n\r\n\r\nexport const getProfile = (userId: number): ThunkType => async (dispatch ) => {\r\n\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(setUserProfile( data));\r\n}\r\n\r\nexport const getHeaderProfile = (userId: number): ThunkType => async (dispatch ) => {\r\n\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(setHeaderProfile(data));\r\n}\r\n\r\n\r\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch ) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(setUserStatusAC( data));\r\n}\r\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch ) => {\r\n    let data = await profileAPI.updateStatus(status)\r\n    if ( data.resultCode === 0) {\r\n        dispatch(setUserStatusAC(status));\r\n    }\r\n}\r\nexport const savePhoto = (file: any): ThunkType => async (dispatch ) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n    if ( data.resultCode === 0) {\r\n        dispatch(savePhotoSucces( data.data.photos));\r\n    }\r\n}\r\n\r\n//---------------------ANYTYPE----------------------\r\n\r\nexport const saveProfile = (profile: ProfileType):ThunkType => async (dispatch:any, getState: any) => {\r\n    const userId = getState().auth.id\r\n    const data = await profileAPI.saveProfile(profile)\r\n    if ( data.resultCode === 0) {\r\n        await dispatch(getProfile(userId));\r\n    } else {\r\n        dispatch(stopSubmit('editProfile', {_error:  data.messages[0]})  )\r\n        return Promise.reject( data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hiden\":\"Header_hiden__1DbpB\",\"header\":\"Header_header__3M_6_\",\"helper_wrapper\":\"Header_helper_wrapper__1Idem\",\"wrapper\":\"Header_wrapper__RFteg\",\"left\":\"Header_left__alylq\",\"logo__txt\":\"Header_logo__txt__2Ek4q\",\"nav\":\"Header_nav__1CLiu\",\"item\":\"Header_item__KPjeY\",\"active\":\"Header_active__38DMm\",\"login\":\"Header_login__2A3QA\",\"linkWrap\":\"Header_linkWrap__2Qxhk\",\"profile\":\"Header_profile__1Y6n0\",\"loginButton\":\"Header_loginButton__12XQx\",\"nickname\":\"Header_nickname__3kjp9\",\"profileInfo\":\"Header_profileInfo__1673x\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\ntype MapPropsType ={\r\n     isAuth:boolean\r\n}\r\n\r\nexport function WithAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    function RedirectComponent(props:  MapPropsType) {\r\n\r\n        let {isAuth,...restProps} = props;\r\n        if (!isAuth) {\r\n            return <Redirect to={\"/login\"}/>\r\n        }\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect<MapPropsType,{},WCP,AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n    return ConnectedRedirectComponent;\r\n}","export default __webpack_public_path__ + \"static/media/defaultProfileImage.4409fc97.png\";","import {InferActionsTypes} from \"./redux-store\";\r\n\r\n//\r\n// export type DialogItemType = {\r\n//     id: number\r\n//     name: string\r\n//     img: string | null\r\n// }\r\n// export type MessageItemType = {\r\n//     id: number\r\n//     name: string\r\n//     img: string | null\r\n//     message: string\r\n// }\r\n\r\n\r\nexport type InitialStateType  = typeof initialState;\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Yury',\r\n            img: 'https://memepedia.ru/wp-content/uploads/2019/03/erzhan-768x569.jpg'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'another girl',\r\n            img: 'https://ru-minecraft.ru/uploads/posts/2018-02/1519154980_mad-villagers.png'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Rina',\r\n            img: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTirEEXAcgdftxMTICIHgtrNo9qBZhlLuUVlg&usqp=CAU'\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Dan',\r\n            img: 'https://media.professionali.ru/processor/topics/size5/2017/03/21/brodude-ru-8-06-2015-f2ecjf7krnt7z.jpg'\r\n        },\r\n    ],\r\n    messages: [\r\n        {\r\n            id: 1,\r\n            name: 'another girl',\r\n            img: 'https://ru-minecraft.ru/uploads/posts/2018-02/1519154980_mad-villagers.png',\r\n            message: 'hello'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'me',\r\n            img: 'https://pbs.twimg.com/profile_images/1412450786542379011/IY6aPa50.png',\r\n            message: 'Hy'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'another girl',\r\n            img: 'https://ru-minecraft.ru/uploads/posts/2018-02/1519154980_mad-villagers.png',\r\n            message: '  what are you doing '\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'me',\r\n            img: 'https://pbs.twimg.com/profile_images/1412450786542379011/IY6aPa50.png',\r\n            message: 'i am programming now'\r\n        }\r\n    ],\r\n};\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsTypes):InitialStateType  => {\r\n    switch (action.type) {\r\n        case 'dialogs/ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {\r\n                    id: 5,\r\n                    name: 'me',\r\n                    img: 'https://pbs.twimg.com/profile_images/1412450786542379011/IY6aPa50.png',\r\n                    message: action.newMessageBody\r\n                }],\r\n            };\r\n\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions={\r\n    addMessage : (newMessageBody:string)  => ({type: 'dialogs/ADD-MESSAGE', newMessageBody}as const)\r\n}\r\n\r\nexport default dialogsReducer;"],"sourceRoot":""}