{"version":3,"sources":["common/FormsControls.module.css","common/FormsControls.tsx","utils/validators/validators.ts","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","Formtype","props","hasError","className","s","formControl","Textarea","Input","required","value","maxLengthCreator","maxLength","length","DialogItem","to","id","dialog__item","activeClassName","active","name","src","img","Message","me","messages__item","message","maxLength50","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","validate","component","placeholder","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogs__wrap","values","addMessage","newMessageBody","compose","connect","state","actions","WithAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,UAAY,iCAAiC,YAAc,mCAAmC,sBAAwB,6CAA6C,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,WAAa,kCAAkC,eAAiB,wC,sLCQhYC,EAA6C,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,MAAsD,IAA/CC,KAAOC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAaC,EAAW,iBACjGC,EAAWJ,GAAWC,EAC5B,OACI,sBAAKI,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEL,MAAO,IAA3D,UACI,8BACI,cAACC,EAAD,2BAAcJ,GAAWK,MAE7B,8BACKC,GAAY,+BAAOH,UAQvBO,EAAW,SAACL,GACrB,OAAO,cAACN,EAAD,2BAAiBM,GAAjB,IAAwBD,SAAS,eAI/BO,EAAQ,SAACN,GAClB,OAAO,cAACN,EAAD,2BAAiBM,GAAjB,IAAwBD,SAAS,a,iCC7B5C,oEAAO,IAAMQ,EAA8B,SAACC,GACxC,IAAIA,EACJ,OAAKA,OAAL,EAAmB,qBAGVC,EAAmB,SAACC,GAAD,OAAyC,SAACF,GACtE,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,8BAAN,OAAqCA,M,oBCPhFlB,EAAOC,QAAU,CAAC,cAAgB,+BAA+B,aAAe,8BAA8B,OAAS,wBAAwB,eAAiB,gCAAgC,GAAK,sB,mGCkBtLmB,EARuB,SAACZ,GACnC,OACI,8BACI,eAAC,IAAD,CAASa,GAAI,YAAcb,EAAMc,GAAIZ,UAAWC,IAAEY,aACzCC,gBAAiBb,IAAEc,OAD5B,UACqCjB,EAAMkB,KAAK,qBAAKC,IAAKnB,EAAMoB,YCU7DC,EAhBsB,SAACrB,GAGlC,OACI,8BAEI,sBAAME,UAA0B,OAAfF,EAAMkB,KAAgBf,IAAEmB,GAAK,IAAMnB,IAAEoB,eAAiBpB,IAAEoB,eAAzE,UACI,4BAAG,4BAAIvB,EAAMkB,SACb,qBAAKC,IAAKnB,EAAMoB,MAFpB,IAE4BpB,EAAMwB,c,oCCuBxCC,EAAiChB,YAAiB,IAalDiB,EAAmBC,YAAU,CAC/BC,KAAK,WADgBD,EAXL,SAAC3B,GACjB,OAAO,uBAAM6B,SAAU7B,EAAM8B,aAAtB,UACH,cAACC,EAAA,EAAD,CAAOC,SAAU,CAACzB,IAASkB,GAAcQ,UAAW5B,IAAWa,KAAM,iBAAkBgB,YAAa,uBACpG,8BACI,yDAYGC,EA/CqB,SAACnC,GAEjC,IAAIoC,EAAkBpC,EAAMqC,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuB1B,GAAI0B,EAAE1B,GAAII,KAAMsB,EAAEtB,KAC7BE,IAAKoB,EAAEpB,KADFoB,EAAE1B,OAGxE2B,EAAmBzC,EAAMqC,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBnB,QAASmB,EAAEnB,QACtBN,KAAMyB,EAAEzB,KACRE,IAAKuB,EAAEvB,KAFFuB,EAAE7B,OAU3E,OACI,sBAAKZ,UAAWC,IAAEyC,cAAlB,UACI,qBAAK1C,UAAWC,IAAEmC,QAAlB,SACKF,IAEL,sBAAKlC,UAAWC,IAAEuC,SAAlB,UACKD,EACD,cAACf,EAAD,CAAkBG,SAZV,SAACgB,GACjB7C,EAAM8C,WAAWD,EAAOE,0B,wBCKjBC,sBACXC,aAPoB,SAACC,GACrB,MAAO,CACHb,YAAaa,EAAMb,eAK2D,CAACS,WAAWK,IAAQL,aACtGM,IAFWJ,EAV8B,SAAChD,GAC1C,OAAO,cAAC,EAAD,eAAaA","file":"static/js/5.fe58f3fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainTitle\":\"FormsControls_mainTitle__3OpOl\",\"formWrapper\":\"FormsControls_formWrapper__2DbfW\",\"rememberMe__container\":\"FormsControls_rememberMe__container__2VP2U\",\"formControl\":\"FormsControls_formControl__1qQTS\",\"error\":\"FormsControls_error__pqwJL\",\"formSummaryError\":\"FormsControls_formSummaryError__3oqae\",\"imageBlock\":\"FormsControls_imageBlock__1RcLn\",\"allFormWrapper\":\"FormsControls_allFormWrapper__2PcSP\"};","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\n\r\ntype FormControlPropsType={\r\n    input: { }\r\n    meta: {touched:boolean, error:string}\r\n    Formtype: any\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({input, meta: {touched, error},Formtype, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error: \"\")}>\r\n            <div>\r\n                <Formtype {...input} {...props}/>\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span> }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props:any) => {\r\n    return <FormControl {...props} Formtype=\"textarea\"/>\r\n}\r\n\r\n\r\nexport const Input = (props:any) => {\r\n    return <FormControl {...props} Formtype=\"input\"/>\r\n}\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required:FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    if (!value) return 'Field is required';\r\n\r\n}\r\nexport const maxLengthCreator = (maxLength:number):FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Overflow Field max length: ${maxLength}`;\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs__wrap\":\"Dialogs_dialogs__wrap__2ZZar\",\"dialog__item\":\"Dialogs_dialog__item__1lTE1\",\"active\":\"Dialogs_active__Mlupo\",\"messages__item\":\"Dialogs_messages__item__3ZPA6\",\"me\":\"Dialogs_me__3uhxe\"};","import React from \"react\"\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType ={\r\n    name: string\r\n    img:string\r\n    id:number\r\n}\r\n\r\n\r\nlet DialogItem: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={\"/dialogs/\" + props.id} className={s.dialog__item}\r\n                     activeClassName={s.active}>{props.name}<img src={props.img}/></NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem","import React from \"react\"\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    name: string\r\n    img: string\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div  className={props.name === 'me' ? s.me + ' ' + s.messages__item : s.messages__item}>\r\n                <p><b>{props.name}</b></p>\r\n                <img src={props.img}/> {props.message}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message","import React from \"react\"\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm } from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls\";\r\nimport {FieldValidatorType, maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {PropsType} from \"./DialogsContainer\";\r\n\r\n\r\n\r\nconst Dialogs:React.FC<PropsType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}\r\n                                                                         img={d.img}/>)\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}\r\n                                                                        name={m.name}\r\n                                                                        img={m.img}/>)\r\n\r\n\r\n    let addNewMessage = (values:any) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs__wrap}>\r\n            <div className={s.dialogs}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <MessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst maxLength50:FieldValidatorType = maxLengthCreator(50);\r\n\r\nconst MessageForm = (props:any) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field validate={[required,maxLength50]} component={Textarea}  name={'newMessageBody'} placeholder={'Enter your message'}/>\r\n        <div>\r\n            <button>add message</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\n\r\n\r\nconst MessageReduxForm = reduxForm({\r\n    form:'Message',\r\n})(MessageForm)\r\n\r\n\r\nexport default Dialogs","import React from \"react\"\r\nimport {actions, InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateType = {\r\n    dialogsPage: InitialStateType,\r\n}\r\ntype MapDispatchType = {\r\n    addMessage: (newMessageBody:string) => void\r\n}\r\ntype OwnPropsType =  InitialStateType\r\n\r\nexport type PropsType =  MapStateType & MapDispatchType & OwnPropsType\r\nconst DialogsContainer:React.FC<PropsType> = (props) => {\r\n    return <Dialogs {...props}/>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateType,MapDispatchType,OwnPropsType, AppStateType>(mapStateToProps, {addMessage:actions.addMessage}),\r\n    WithAuthRedirect\r\n)(DialogsContainer);"],"sourceRoot":""}