{"version":3,"sources":["common/FormsControls.js","common/FormsControls.module.css","utils/validators/validators.js","components/Profile/profileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/profileInfo/ProfileStatusWithHooks.jsx","components/Profile/profileInfo/ProfileDataForm.jsx","components/Profile/profileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["FormControl","input","meta","touched","error","Formtype","props","hasError","className","s","formControl","Textarea","Input","module","exports","required","value","maxLengthCreator","maxLength","length","Post","item","src","name","message","likesCount","maxLength30","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","validate","component","placeholder","MyPosts","postsElement","posts","map","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onStatusChange","e","currentTarget","deactivateEditMode","updateUserStatus","isOwner","onChange","onBlur","autoFocus","onDoubleClick","maxLength20","maxLength100","maxLength300","maxLength1000","ProfileDataFormReduxForm","profile","contacts","profileData","fields","type","profileLinks","Object","keys","el","labelInput","formSummaryError","accept__btn","onClick","ProfileData","goToEditMode","discriptionsWrap","subHeaders","aboutMe","links__md","profileData__changes","lookingForAJob","lookingForAJobDescription","target","href","ProfileInfo","savePhoto","saveProfile","Preloader","profileInfo","nameBlock","fullName","profilePhoto","photos","large","defPhoto","hiden","id","files","htmlFor","initialValues","formData","then","Profile","main","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.4361d9d1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\n\r\nconst FormControl = ({input,meta: {touched, error},Formtype, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error: \"\")}>\r\n            <div>\r\n                <Formtype {...input} {...props} />\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span> }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props) => {\r\n    return <FormControl {...props} Formtype=\"textarea\"></FormControl>\r\n}\r\n\r\n\r\nexport const Input = (props) => {\r\n    return <FormControl {...props} Formtype=\"input\"></FormControl>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainTitle\":\"FormsControls_mainTitle__3OpOl\",\"formWrapper\":\"FormsControls_formWrapper__2DbfW\",\"rememberMe__container\":\"FormsControls_rememberMe__container__2VP2U\",\"formControl\":\"FormsControls_formControl__1qQTS\",\"error\":\"FormsControls_error__pqwJL\",\"formSummaryError\":\"FormsControls_formSummaryError__3oqae\",\"imageBlock\":\"FormsControls_imageBlock__1RcLn\",\"allFormWrapper\":\"FormsControls_allFormWrapper__2PcSP\"};","export const required = value => {\r\n    if (value) return undefined;\r\n    if (!value) return 'Field is required';\r\n\r\n}\r\nexport const maxLengthCreator =(maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return `Overflow Field max length: ${maxLength}`;\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hiden\":\"ProfileInfo_hiden__21E4c\",\"accept__btn\":\"ProfileInfo_accept__btn__2TMtR\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3-AVQ\",\"fields\":\"ProfileInfo_fields__3vtob\",\"links__md\":\"ProfileInfo_links__md__3fI41\",\"profileInfo\":\"ProfileInfo_profileInfo__2MvMn\",\"subHeaders\":\"ProfileInfo_subHeaders__11n-k\",\"statusWrapper\":\"ProfileInfo_statusWrapper__1BDOQ\",\"profilePhoto\":\"ProfileInfo_profilePhoto__1IUKO\",\"profileData\":\"ProfileInfo_profileData__3sDpn\",\"discriptionsWrap\":\"ProfileInfo_discriptionsWrap__9KldL\",\"profileData__changes\":\"ProfileInfo_profileData__changes__3X23m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"MyPosts_active__3vSi_\",\"item\":\"MyPosts_item__B5Ooa\",\"MyPosts\":\"MyPosts_MyPosts__3VTBa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Post_active__3h0eq\",\"item\":\"Post_item__XZZ5d\"};","import React from \"react\"\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n   return (\r\n      <div>\r\n         <div className={s.item}>\r\n            <img src=\"https://cs11.pikabu.ru/post_img/big/2020/04/15/7/15869461281221556.jpg\"></img>\r\n            <b>{props.name} </b>\r\n            {props.message}\r\n            <div>\r\n               <span className=\"like\">Like </span>{props.likesCount}\r\n            </div>\r\n         </div>\r\n\r\n      </div>\r\n\r\n   )\r\n}\r\nexport default Post","import React from \"react\"\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\"\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {required,maxLengthCreator} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls\";\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElement = props.posts.map(posts => <Post name={posts.name} message={posts.message}\r\n                                                      likesCount={posts.likesCount}/>)\r\n\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.MyPosts}>\r\n            <h3> My posts:</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            {postsElement}\r\n        </div>\r\n    )\r\n\r\n}\r\nconst AddNewPostForm  = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field validate={[required, maxLength30]} name='newPostText' component={Textarea} placeholder='write something'></Field>\r\n            <div>\r\n                <button>add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form:'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from \"react\"\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n\r\n    }\r\n};\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer","import React, {useEffect, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\n\r\nconst ProfileStatusWithHooks  = (props) => {\r\n\r\n    let  [editMode,setEditMode] = useState(false);\r\n    let  [status,setStatus] = useState(props.status);\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status]);\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus( e.currentTarget.value)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const showPersonalStatus = () => {\r\n        // { !editMode &&\r\n        // <div>\r\n        //     <span onDoubleClick={()=>setEditMode(true)} >  { status||' write somebody'} </span>\r\n        // </div>\r\n        // }\r\n        // {\r\n        //     editMode &&\r\n        //     <div>\r\n        //         <input onChange={onStatusChange}\r\n        //                onBlur={deactivateEditMode }\r\n        //                value={status}\r\n        //                autoFocus={true} />\r\n        //     </div>\r\n        // }\r\n        if (!editMode){\r\n            return <span onDoubleClick={()=>setEditMode(true)} >  { status||'Изменить статус'} </span>\r\n\r\n        } else if(editMode){\r\n            return <input onChange={onStatusChange}\r\n                       onBlur={deactivateEditMode }\r\n                       value={status}\r\n                       autoFocus={true} />\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <span>Статус: </span>\r\n        <b>\r\n        {props.isOwner\r\n            ? showPersonalStatus()\r\n            :\r\n                <span>  { status||'Изменить статус'} </span>\r\n\r\n         }\r\n        </b>\r\n\r\n\r\n        </div>\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Input, Textarea} from \"../../../common/FormsControls\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\n\r\nlet maxLength20 = maxLengthCreator(20)\r\nlet maxLength100 = maxLengthCreator(100)\r\nlet maxLength300 = maxLengthCreator(300)\r\nlet maxLength1000 = maxLengthCreator(1000)\r\n\r\n\r\nconst ProfileDataForm = ({profile, handleSubmit,error}) => {\r\n\r\n    let contacts = profile.contacts;\r\n\r\n    return <form onSubmit={handleSubmit} className={s.profileData}>\r\n\r\n\r\n\r\n\r\n        <div><b>Имя: </b><Field className={s.fields} validate={[required, maxLength20]} placeholder='Ваше имя' name={'fullName'}\r\n                                component={Input}/>\r\n        </div>\r\n        <div>\r\n            <b>Обо мне:</b>\r\n\r\n            <Field className={s.fields} validate={[required, maxLength300]} placeholder='Обо мне...' name={'aboutMe'} component={Textarea}/>\r\n        </div>\r\n        <div>\r\n            {/*<b>Ищу работу:</b> {profile.lookingForAJob ? 'Да!' : 'Нет'}*/}\r\n            <b>Ищу работу:</b>\r\n            <Field validate={[required]} type='checkBox' name={'lookingForAJob'} component={Input}/>\r\n\r\n        </div>\r\n        <p>\r\n            <b>Навыки: </b>\r\n            <Field className={s.fields} validate={[required, maxLength1000]} placeholder='Мои навыки...' name={'lookingForAJobDescription'}\r\n                   component={Textarea}/>\r\n\r\n        </p>\r\n        <div>\r\n            <b>Контакты:</b>\r\n            <p className={s.profileLinks}>{Object.keys(contacts).map(el => <div key={el}><span className={s.labelInput}>{el}:</span> <Field className={s.fields} validate={[maxLength100]}\r\n                                                                                             placeholder={el}\r\n                                                                                             name={'contacts.' + el}\r\n                                                                                             component={Input}/>\r\n            </div>)}</p>\r\n        </div>\r\n        <div>\r\n\r\n            {\r\n                error && <div className={s.formSummaryError}>{ error}</div>\r\n            }\r\n\r\n            <button className={s.accept__btn} onClick={handleSubmit}>Сохранить</button>\r\n        </div>\r\n    </form>\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm({form: \"editProfile\"})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm","import React, {useState} from \"react\"\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/Preloader\";\r\nimport defPhoto from \"../../../assets/images/defaultProfileImage.png\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    let contacts = profile.contacts;\r\n\r\n    let onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    let onSubmit = (formData) => {\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className={s.profileInfo}>\r\n                <h3 className={s.subHeaders + ' ' + s.nameBlock}> Имя: <b>{profile.fullName}</b></h3>\r\n\r\n                <div>\r\n                    <img className={s.profilePhoto} src={profile.photos.large ? profile.photos.large : defPhoto}/>\r\n                    <input className={s.hiden} name=\"file\" id=\"input__file\" onChange={onMainPhotoSelected}\r\n                           type={'file'}/>\r\n                    <div>{isOwner &&\r\n                    <label htmlFor=\"input__file\" className={s.links__md}>Изменить фото </label>}\r\n                    </div>\r\n                </div>\r\n                <h3 className={s.subHeaders}>\r\n\r\n                    <ProfileStatusWithHooks isOwner={isOwner} status={status} updateUserStatus={updateUserStatus}/>\r\n\r\n                </h3>\r\n                <hr/>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    let contacts = profile.contacts;\r\n\r\n    return <div className={s.profileData}>\r\n\r\n        <div className={s.discriptionsWrap}>\r\n            <div><h3 className={s.subHeaders}>Описание:</h3> {profile.aboutMe}</div>\r\n\r\n             {isOwner && <button className={s.links__md + ' ' + s.profileData__changes}\r\n                                     onClick={goToEditMode}>Редактировать</button>}\r\n\r\n        </div>\r\n        <div>\r\n            <h3 className={s.subHeaders}>Ищу работу:</h3> {profile.lookingForAJob ? 'Да!' : 'Нет'}\r\n        </div>\r\n        <div>\r\n            <h3 className={s.subHeaders}>Ключевые навыки: </h3>\r\n            {profile.lookingForAJobDescription}\r\n        </div>\r\n        <div>\r\n            <h3 className={s.subHeaders}>contacts:</h3>\r\n            <div className={s.profileLinks}>{Object.keys(contacts).map(el => <div key={el}>{el}: <a\r\n                className={s.links__md} target=\"_blank\" href={contacts[el]}>{contacts[el]}</a></div>)}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\"\r\nimport s from './Profile.module.css';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./profileInfo/ProfileInfo\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n\r\n        <main className={s.main}>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateUserStatus={props.updateUserStatus}\r\n                         saveProfile={props.saveProfile}\r\n\r\n            />\r\n            {/*<MyPostsContainer store={props.store}/>*/}\r\n        </main>\r\n    )\r\n}\r\nexport default Profile","import React from \"react\"\r\nimport s from './Profile.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {getProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <main className={s.main}>\r\n                <Profile {...this.props}\r\n                         isOwner={ !this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateUserStatus={this.props.updateUserStatus}\r\n                />\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getUserStatus, updateUserStatus,savePhoto,saveProfile}),\r\n    withRouter,\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}