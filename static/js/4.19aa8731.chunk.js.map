{"version":3,"sources":["common/FormsControls.module.css","common/FormsControls.tsx","utils/validators/validators.ts","components/Profile/profileInfo/ProfileInfo.module.css","components/Profile/profileInfo/ProfileStatusWithHooks.tsx","components/Profile/profileInfo/ProfileDataForm.tsx","components/Profile/profileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","Formtype","props","hasError","className","s","formControl","Textarea","Input","required","value","maxLengthCreator","maxLength","length","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onStatusChange","e","currentTarget","deactivateEditMode","updateUserStatus","isOwner","onChange","onBlur","autoFocus","onDoubleClick","maxLength20","maxLength100","maxLength300","maxLength1000","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","contacts","onSubmit","profileData","Field","fields","validate","placeholder","name","component","type","profileLinks","Object","keys","map","el","labelInput","formSummaryError","accept__btn","onClick","ProfileData","goToEditMode","discriptionsWrap","subHeaders","aboutMe","links__md","profileData__changes","lookingForAJob","lookingForAJobDescription","target","href","ProfileInfo","savePhoto","saveProfile","Preloader","profileInfo","nameBlock","fullName","profilePhoto","src","photos","large","defPhoto","hiden","id","files","htmlFor","initialValues","formData","then","Profile","main","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfile","getUserStatus","refreshProfile","prevProps","prevState","React","Component","compose","connect","state","profilePage","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.19aa8731.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainTitle\":\"FormsControls_mainTitle__3OpOl\",\"formWrapper\":\"FormsControls_formWrapper__2DbfW\",\"rememberMe__container\":\"FormsControls_rememberMe__container__2VP2U\",\"formControl\":\"FormsControls_formControl__1qQTS\",\"error\":\"FormsControls_error__pqwJL\",\"formSummaryError\":\"FormsControls_formSummaryError__3oqae\",\"imageBlock\":\"FormsControls_imageBlock__1RcLn\",\"allFormWrapper\":\"FormsControls_allFormWrapper__2PcSP\"};","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\n\r\ntype FormControlPropsType={\r\n    input: { }\r\n    meta: {touched:boolean, error:string}\r\n    Formtype: any\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({input, meta: {touched, error},Formtype, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error: \"\")}>\r\n            <div>\r\n                <Formtype {...input} {...props}/>\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span> }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props:any) => {\r\n    return <FormControl {...props} Formtype=\"textarea\"/>\r\n}\r\n\r\n\r\nexport const Input = (props:any) => {\r\n    return <FormControl {...props} Formtype=\"input\"/>\r\n}\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required:FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    if (!value) return 'Field is required';\r\n\r\n}\r\nexport const maxLengthCreator = (maxLength:number):FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Overflow Field max length: ${maxLength}`;\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hiden\":\"ProfileInfo_hiden__21E4c\",\"accept__btn\":\"ProfileInfo_accept__btn__2TMtR\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3-AVQ\",\"fields\":\"ProfileInfo_fields__3vtob\",\"links__md\":\"ProfileInfo_links__md__3fI41\",\"profileInfo\":\"ProfileInfo_profileInfo__2MvMn\",\"subHeaders\":\"ProfileInfo_subHeaders__11n-k\",\"statusWrapper\":\"ProfileInfo_statusWrapper__1BDOQ\",\"profilePhoto\":\"ProfileInfo_profilePhoto__1IUKO\",\"profileData\":\"ProfileInfo_profileData__3sDpn\",\"discriptionsWrap\":\"ProfileInfo_discriptionsWrap__9KldL\",\"profileData__changes\":\"ProfileInfo_profileData__changes__3X23m\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status:string) => void\r\n    isOwner: boolean\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks:React.FC<PropsType>  = (props) => {\r\n\r\n    let  [editMode,setEditMode] = useState(false);\r\n    let  [status,setStatus] = useState(props.status);\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status]);\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus( e.currentTarget.value)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const showPersonalStatus = () => {\r\n        // { !editMode &&\r\n        // <div>\r\n        //     <span onDoubleClick={()=>setEditMode(true)} >  { status||' write somebody'} </span>\r\n        // </div>\r\n        // }\r\n        // {\r\n        //     editMode &&\r\n        //     <div>\r\n        //         <input onChange={onStatusChange}\r\n        //                onBlur={deactivateEditMode }\r\n        //                value={status}\r\n        //                autoFocus={true} />\r\n        //     </div>\r\n        // }\r\n        if (!editMode){\r\n            return <span onDoubleClick={()=>setEditMode(true)} >  { status||'Изменить статус'} </span>\r\n\r\n        } else if(editMode){\r\n            return <input onChange={onStatusChange}\r\n                       onBlur={deactivateEditMode }\r\n                       value={status}\r\n                       autoFocus={true} />\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <span>Статус: </span>\r\n        <b>\r\n        {props.isOwner\r\n            ? showPersonalStatus()\r\n            :\r\n                <span>  { status||'Изменить статус'} </span>\r\n\r\n         }\r\n        </b>\r\n\r\n\r\n        </div>\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Input, Textarea} from \"../../../common/FormsControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\nlet maxLength20 = maxLengthCreator(20)\r\nlet maxLength100 = maxLengthCreator(100)\r\nlet maxLength300 = maxLengthCreator(300)\r\nlet maxLength1000 = maxLengthCreator(1000)\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({profile, handleSubmit, error}) => {\r\n\r\n    let contacts = profile.contacts;\r\n\r\n    return <form onSubmit={handleSubmit} className={s.profileData}>\r\n\r\n\r\n        <div><b>Имя: </b><Field className={s.fields} validate={[required, maxLength20]} placeholder='Ваше имя'\r\n                                name={'fullName'}\r\n                                component={Input}/>\r\n        </div>\r\n        <div>\r\n            <b>Обо мне:</b>\r\n\r\n            <Field className={s.fields} validate={[required, maxLength300]} placeholder='Обо мне...' name={'aboutMe'}\r\n                   component={Textarea}/>\r\n        </div>\r\n        <div>\r\n            {/*<b>Ищу работу:</b> {profile.lookingForAJob ? 'Да!' : 'Нет'}*/}\r\n            <b>Ищу работу:</b>\r\n            <Field validate={[]} type='checkBox' name={'lookingForAJob'} component={Input}/>\r\n\r\n        </div>\r\n        <p>\r\n            <b>Навыки: </b>\r\n            <Field className={s.fields} validate={[required, maxLength1000]} placeholder='Мои навыки...'\r\n                   name={'lookingForAJobDescription'}\r\n                   component={Textarea}/>\r\n\r\n        </p>\r\n        <div>\r\n            <b>Контакты:</b>\r\n            <div className={s.profileLinks}>{Object.keys(contacts).map(el => <div key={el}><span\r\n                className={s.labelInput}>{el}:</span> <Field className={s.fields} validate={[maxLength100]}\r\n                                                             placeholder={el}\r\n                                                             name={'contacts.' + el}\r\n                                                             component={Input}/>\r\n            </div>)}</div>\r\n        </div>\r\n        <div>\r\n\r\n            {\r\n                error && <div className={s.formSummaryError}>{error}</div>\r\n            }\r\n\r\n            <button className={s.accept__btn} onClick={handleSubmit}>Сохранить</button>\r\n        </div>\r\n    </form>\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: \"editProfile\"})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\"\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/Preloader\";\r\nimport defPhoto from \"../../../assets/images/defaultProfileImage.png\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile:ProfileType | null\r\n\r\n    status:string\r\n    updateUserStatus:(status:string)=> void\r\n    isOwner:boolean\r\n    saveProfile:(profile:ProfileType)=>Promise<any>\r\n    savePhoto: (file:File)=> void\r\n}\r\n\r\n\r\nconst ProfileInfo:React.FC<PropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    let contacts = profile.contacts;\r\n\r\n    let onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    let onSubmit = (formData:ProfileType) => {\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className={s.profileInfo}>\r\n                <h3 className={s.subHeaders + ' ' + s.nameBlock}> Имя: <b>{profile.fullName}</b></h3>\r\n\r\n                <div>\r\n                    <img className={s.profilePhoto} src={profile.photos.large ? profile.photos.large : defPhoto}/>\r\n                    <input className={s.hiden} name=\"file\" id=\"input__file\" onChange={onMainPhotoSelected}\r\n                           type={'file'}/>\r\n                    <div>{isOwner &&\r\n                    <label htmlFor=\"input__file\" className={s.links__md}>Изменить фото </label>}\r\n                    </div>\r\n                </div>\r\n                <h3 className={s.subHeaders}>\r\n\r\n                    <ProfileStatusWithHooks isOwner={isOwner} status={status} updateUserStatus={updateUserStatus}/>\r\n\r\n                </h3>\r\n                <hr/>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile:ProfileType\r\n    isOwner:boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData:React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    let contacts = profile.contacts;\r\n\r\n    return <div className={s.profileData}>\r\n\r\n        <div className={s.discriptionsWrap}>\r\n            <div><h3 className={s.subHeaders}>Описание:</h3> {profile.aboutMe}</div>\r\n\r\n             {isOwner && <button className={s.links__md + ' ' + s.profileData__changes}\r\n                                     onClick={goToEditMode}>Редактировать</button>}\r\n\r\n        </div>\r\n        <div>\r\n            <h3 className={s.subHeaders}>Ищу работу:</h3> {profile.lookingForAJob ? 'Да!' : 'Нет'}\r\n        </div>\r\n        <div>\r\n            <h3 className={s.subHeaders}>Ключевые навыки: </h3>\r\n            {profile.lookingForAJobDescription}\r\n        </div>\r\n        <div>\r\n            <h3 className={s.subHeaders}>Контакты:</h3>\r\n            <div className={s.profileLinks}>{Object\r\n                .keys(contacts)\r\n                .map(el => <div key={el}>{el}: <a\r\n                className={s.links__md} target=\"_blank\" href={contacts[el as keyof ContactsType]}>{contacts[el as keyof ContactsType]}</a>\r\n                </div>)}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\"\r\nimport s from './Profile.module.css';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./profileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile:ProfileType | null\r\n    status:string\r\n    updateUserStatus:(status:string )=> void\r\n    isOwner:boolean\r\n    saveProfile:(profile:ProfileType)=>Promise<any>\r\n    savePhoto: (file:File)=> void\r\n\r\n}\r\n\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n    return (\r\n\r\n        <main className={s.main}>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateUserStatus={props.updateUserStatus}\r\n                         saveProfile={props.saveProfile}\r\n\r\n            />\r\n            {/*<MyPostsContainer store={props.store}/>*/}\r\n        </main>\r\n    )\r\n}\r\nexport default Profile","import React from \"react\"\r\nimport s from './Profile.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {getProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getProfile: (userId: number) => void,\r\n    getUserStatus: (userId: number) => void,\r\n    updateUserStatus: (status: string) => void,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getProfile(userId as number);\r\n        this.props.getUserStatus(userId as number);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <main className={s.main}>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateUserStatus={this.props.updateUserStatus}\r\n                />\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}