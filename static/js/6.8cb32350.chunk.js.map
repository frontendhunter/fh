{"version":3,"sources":["common/FormsControls.module.css","common/FormsControls.tsx","utils/validators/validators.ts","components/Login/Login.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","Formtype","props","hasError","className","s","formControl","Textarea","Input","required","value","maxLengthCreator","maxLength","length","maxLength50","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","allFormWrapper","mainTitle","formWrapper","onSubmit","formCentre","src","validate","placeholder","name","component","type","rememberMe__container","rememberMe","formSummaryError","imageBlock","alt","connect","state","auth","isAuth","login","to","formData","email","password","captcha"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,UAAY,iCAAiC,YAAc,mCAAmC,sBAAwB,6CAA6C,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,WAAa,kCAAkC,eAAiB,wC,sLCQhYC,EAA6C,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,MAAsD,IAA/CC,KAAOC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAaC,EAAW,iBACjGC,EAAWJ,GAAWC,EAC5B,OACI,sBAAKI,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEL,MAAO,IAA3D,UACI,8BACI,cAACC,EAAD,2BAAcJ,GAAWK,MAE7B,8BACKC,GAAY,+BAAOH,UAQvBO,EAAW,SAACL,GACrB,OAAO,cAACN,EAAD,2BAAiBM,GAAjB,IAAwBD,SAAS,eAI/BO,EAAQ,SAACN,GAClB,OAAO,cAACN,EAAD,2BAAiBM,GAAjB,IAAwBD,SAAS,a,iCC7B5C,oEAAO,IAAMQ,EAA8B,SAACC,GACxC,IAAIA,EACJ,OAAKA,OAAL,EAAmB,qBAGVC,EAAmB,SAACC,GAAD,OAAyC,SAACF,GACtE,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,8BAAN,OAAqCA,M,iCCRhF,oGAgBIE,EAAcH,YAAiB,IA8C7BI,EAAiBC,YAAkD,CAACC,KAAM,SAAzDD,EA5CoF,SAAC,GAAuC,IAAtChB,EAAqC,EAArCA,MAAOkB,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,WAE9H,OACI,sBAAKf,UAAWC,IAAEe,eAAlB,UAEI,qBAAKhB,UAAWC,IAAEgB,UAAlB,SACI,uJAA0B,qDAG9B,uBAAMjB,UAAWC,IAAEiB,YAAaC,SAAUL,EAA1C,UACI,sBAAKd,UAAWC,IAAEmB,WAAlB,UAEI,8HACCL,GAAc,qBAAKM,IAAKN,IACxBA,GAAc,cAAC,IAAD,CAAOO,SAAU,CAACjB,IAAUK,GAAca,YAAY,UAAUC,KAAM,UAC/DC,UAAWrB,MACjC,8BACI,cAAC,IAAD,CAAOkB,SAAU,CAACjB,IAAUK,GAAca,YAAY,QAAQC,KAAM,QAASC,UAAWrB,QAE5F,8BACI,cAAC,IAAD,CAAOkB,SAAU,CAACjB,IAAUK,GAAca,YAAY,WAAWG,KAAK,WAC/DF,KAAM,WACNC,UAAWrB,QAEtB,sBAAKJ,UAAWC,IAAE0B,sBAAlB,UACI,cAAC,IAAD,CAAO3B,UAAWC,IAAE2B,WAAYF,KAAK,WAAWF,KAAM,aAC/CC,UAAWrB,MAFtB,sFAKIR,GAAS,qBAAKI,UAAWC,IAAE4B,iBAAlB,SAAqCjC,IAElD,8BACI,uGAIR,qBAAKI,UAAWC,IAAE6B,WAAlB,SAA8B,qBAC1BT,IAAI,kFACJU,IAAI,qGAyCTC,uBAJS,SAACC,GAAD,MAA6C,CACjElB,WAAYkB,EAAMC,KAAKnB,WACvBoB,OAAQF,EAAMC,KAAKC,UAEiB,CAACC,WAA1BJ,EAjBmD,SAAClC,GAK/D,OAAIA,EAAMqC,OACC,cAAC,IAAD,CAAUE,GAAI,aAElB,8BACH,cAAC1B,EAAD,CAAgBI,WAAYjB,EAAMiB,WAAYI,SAPjC,SAACmB,GACdxC,EAAMsC,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASV,WAAYU,EAASG","file":"static/js/6.8cb32350.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainTitle\":\"FormsControls_mainTitle__3OpOl\",\"formWrapper\":\"FormsControls_formWrapper__2DbfW\",\"rememberMe__container\":\"FormsControls_rememberMe__container__2VP2U\",\"formControl\":\"FormsControls_formControl__1qQTS\",\"error\":\"FormsControls_error__pqwJL\",\"formSummaryError\":\"FormsControls_formSummaryError__3oqae\",\"imageBlock\":\"FormsControls_imageBlock__1RcLn\",\"allFormWrapper\":\"FormsControls_allFormWrapper__2PcSP\"};","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\n\r\ntype FormControlPropsType={\r\n    input: { }\r\n    meta: {touched:boolean, error:string}\r\n    Formtype: any\r\n}\r\n\r\nconst FormControl:React.FC<FormControlPropsType> = ({input, meta: {touched, error},Formtype, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error: \"\")}>\r\n            <div>\r\n                <Formtype {...input} {...props}/>\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span> }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props:any) => {\r\n    return <FormControl {...props} Formtype=\"textarea\"/>\r\n}\r\n\r\n\r\nexport const Input = (props:any) => {\r\n    return <FormControl {...props} Formtype=\"input\"/>\r\n}\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required:FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    if (!value) return 'Field is required';\r\n\r\n}\r\nexport const maxLengthCreator = (maxLength:number):FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Overflow Field max length: ${maxLength}`;\r\n    return undefined\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from '../../common/FormsControls.module.css'\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({error, handleSubmit, captchaUrl}) => {\r\n\r\n    return (\r\n        <div className={s.allFormWrapper}>\r\n\r\n            <div className={s.mainTitle}>\r\n                <h1>Найдите сотрудников с <b>FrontEndHunter!</b></h1>\r\n            </div>\r\n\r\n            <form className={s.formWrapper} onSubmit={handleSubmit}>\r\n                <div className={s.formCentre}>\r\n\r\n                    <h2>Войдите в аккаунт</h2>\r\n                    {captchaUrl && <img src={captchaUrl}/>}\r\n                    {captchaUrl && <Field validate={[required, maxLength50]} placeholder='captcha' name={'captcha'}\r\n                                          component={Input}/>}\r\n                    <div>\r\n                        <Field validate={[required, maxLength50]} placeholder='Email' name={'email'} component={Input}/>\r\n                    </div>\r\n                    <div>\r\n                        <Field validate={[required, maxLength50]} placeholder=\"password\" type='password'\r\n                               name={'password'}\r\n                               component={Input}/>\r\n                    </div>\r\n                    <div className={s.rememberMe__container}>\r\n                        <Field className={s.rememberMe} type=\"checkbox\" name={'rememberMe'}\r\n                               component={Input}/> запомнить меня\r\n                    </div>\r\n                    {\r\n                        error && <div className={s.formSummaryError}>{error}</div>\r\n                    }\r\n                    <div>\r\n                        <button>Продолжить</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={s.imageBlock}><img\r\n                    src=\"\thttps://i.hh.ru/css/globals/account/blocks/login/applicant__min_.svg?v=040521\"\r\n                    alt=\"Заполните форму\"/></div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'Login'})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: any) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div>\r\n        <LoginReduxForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n})\r\nexport default connect(mapStateToProps, {login})(Login)"],"sourceRoot":""}